// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PatientMedication.Infrastructure.DbContexts;

#nullable disable

namespace PatientMedication.Infrastructure.Migrations
{
    [DbContext(typeof(PatientMedicationContext))]
    [Migration("20250406194452_20250406-001-Add-MedicationRequestStatus-table")]
    partial class _20250406001AddMedicationRequestStatustable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.HasSequence("NextClinicianReference", "clinicians")
                .StartsAt(100000000001L)
                .HasMin(100000000001L)
                .HasMax(999999999999L);

            modelBuilder.HasSequence("NextPatientReference", "patients")
                .StartsAt(100000000001L)
                .HasMin(100000000001L)
                .HasMax(999999999999L);

            modelBuilder.Entity("PatientMedication.Infrastructure.Models.Clinician", b =>
                {
                    b.Property<int>("ClinicianId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClinicianId"));

                    b.Property<long>("ClinicianReference")
                        .HasColumnType("bigint");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("RegistrationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ClinicianId")
                        .HasName("PK_Clinician");

                    b.ToTable("Clinician", "clinicians");
                });

            modelBuilder.Entity("PatientMedication.Infrastructure.Models.Medication", b =>
                {
                    b.Property<int>("MedicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicationId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("CodeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("FormId")
                        .HasColumnType("int");

                    b.Property<int>("MedicationCodeSystemId")
                        .HasColumnType("int");

                    b.Property<int>("StrengthUnitId")
                        .HasColumnType("int");

                    b.Property<short>("StrengthValue")
                        .HasColumnType("smallint");

                    b.HasKey("MedicationId")
                        .HasName("PK_Medication");

                    b.HasIndex("MedicationCodeSystemId");

                    b.ToTable("Medication", "medication");
                });

            modelBuilder.Entity("PatientMedication.Infrastructure.Models.MedicationCodeSystem", b =>
                {
                    b.Property<int>("MedicationCodeSystemId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("MedicationCodeSystemId")
                        .HasName("PK_MedicationCodeSystem");

                    b.ToTable("MedicationCodeSystem", "medication");

                    b.HasData(
                        new
                        {
                            MedicationCodeSystemId = 1,
                            Code = "SNOMED"
                        });
                });

            modelBuilder.Entity("PatientMedication.Infrastructure.Models.MedicationRequestStatus", b =>
                {
                    b.Property<short>("MedicationRequestStatusId")
                        .HasColumnType("smallint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("MedicationRequestStatusId")
                        .HasName("PK_MedicationRequestStatus");

                    b.ToTable("MedicationRequestStatus", "medication");

                    b.HasData(
                        new
                        {
                            MedicationRequestStatusId = (short)1,
                            Description = "Active"
                        },
                        new
                        {
                            MedicationRequestStatusId = (short)2,
                            Description = "On hold"
                        },
                        new
                        {
                            MedicationRequestStatusId = (short)3,
                            Description = "Cancelled"
                        },
                        new
                        {
                            MedicationRequestStatusId = (short)4,
                            Description = "Completed"
                        });
                });

            modelBuilder.Entity("PatientMedication.Infrastructure.Models.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientId"));

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("PatientReference")
                        .HasColumnType("bigint");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PatientId")
                        .HasName("PK_Patient");

                    b.ToTable("Patient", "patients");
                });

            modelBuilder.Entity("PatientMedication.Infrastructure.Models.Medication", b =>
                {
                    b.HasOne("PatientMedication.Infrastructure.Models.MedicationCodeSystem", "MedicationCodeSystem")
                        .WithMany()
                        .HasForeignKey("MedicationCodeSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicationCodeSystem");
                });
#pragma warning restore 612, 618
        }
    }
}
